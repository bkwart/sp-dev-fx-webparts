{"version":3,"sources":["webparts/angularFileUpload/app/directives/customFileChange.ts"],"names":[],"mappings":";AACA;IACE,0BAAoB,MAAwB;QAA5C,iBAEC;QAFmB,WAAM,GAAN,MAAM,CAAkB;QAItC,aAAQ,GAAG,GAAG,CAAC;QACf,SAAI,GAAG,UAAC,KAAgB,EAAE,OAAY,EAAE,KAAU;YACtD,IAAM,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAClD,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACrB,KAAK,CAAC,MAAM,CAAC;oBACX,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;oBAEhC,MAAM,CAAC,MAAM,GAAG,UAAC,KAAU;wBACzB,IAAM,SAAS,GAAU;4BACvB,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;4BAClC,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM;yBAClC,CAAC;wBACF,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;oBAChC,CAAC,CAAC;oBAEF,MAAM,CAAC,OAAO,GAAG,UAAC,KAAU;wBAC1B,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC5B,CAAC,CAAC;oBACF,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IAxBF,CAAC;IA0BY,wBAAO,GAArB;QACG,IAAM,SAAS,GAAG,UAAC,MAAwB,IAAK,OAAA,IAAI,gBAAgB,CAAC,MAAM,CAAC,EAA5B,CAA4B,CAAC;QAC7E,SAAS,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/B,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACH,uBAAC;AAAD,CAlCA,AAkCC,IAAA;AAlCY,4CAAgB","file":"webparts/angularFileUpload/app/directives/customFileChange.js","sourcesContent":["import { IFile } from \"../../interfaces/IFile\";\r\nexport class CustomFileChange implements ng.IDirective {\r\n  constructor(private $parse: ng.IParseService) {\r\n\r\n  }\r\n\r\n public restrict = \"A\";\r\n public link = (scope: ng.IScope, element: any, attrs: any) => {\r\n    const model = this.$parse(attrs.customFileChange);\r\n    const modelSetter = model.assign;\r\n    element.bind(\"change\", (): void => {\r\n      scope.$apply((): void => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (event: any): void => {\r\n          const fileModel: IFile = {\r\n            fileName: element[0].files[0].name, \r\n            fileAsBuffer: event.target.result\r\n          };\r\n          modelSetter(scope, fileModel);\r\n        };\r\n\r\n        reader.onerror = (event: any): void => {\r\n          alert(event.target.error);\r\n        };\r\n        reader.readAsArrayBuffer(element[0].files[0]);\r\n      });\r\n    });\r\n  };\r\n\r\n public static factory(): ng.IDirectiveFactory {\r\n    const directive = ($parse: ng.IParseService) => new CustomFileChange($parse);\r\n    directive.$inject = ['$parse'];\r\n    return directive;\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\..\\..\\src"}